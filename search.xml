<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>&lt;&lt;认知迭代&gt;&gt; 第一章 读书笔记</title>
      <link href="/2019/09/08/%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3-1/"/>
      <url>/2019/09/08/%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3-1/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-注意力陷阱"><a href="#第一章-注意力陷阱" class="headerlink" title="第一章　注意力陷阱"></a>第一章　注意力陷阱</h3><p><em>专注是一切更高能力的根源。 ——李小龙（Bruce Lee）</em></p><hr><h4 id="卡罗琳的注意力烦恼"><a href="#卡罗琳的注意力烦恼" class="headerlink" title="卡罗琳的注意力烦恼"></a><strong>卡罗琳的注意力烦恼</strong></h4><blockquote><p>我把行李落在机场恰恰印证了我有“神游”的倾向，也正因为如此，我从8岁起就被大家戏称为“蝴蝶脑”。如今，类似的事情在我的生活中仍时有发生。最近一次，我在城里的大街上走着，忽然看到一位朋友在马路对面大笑不止，她对我说：“你看上去就像是个疯女人，望着天空，漫无目的地徘徊！”有意思，但她说得没错：在“走神”的时候，我的神志可是真的不知道出走到哪里去了。</p><p>当需要完成工作时，这样的走神并没有给我带来任何好处。我独自在家工作，但却养了一只非常闹人的狗，在我儿子去上学的时候，它总是吵个不停。只在极少数情况下，这样的工作方式才显得非常完美——忙碌一天下来，感觉自己就像女超人一样全能高效。但更普遍的情况是，我一整天都在不同事情之间换来换去，到头来什么有用的事情都没做成——虽然我每天的工作就是读几篇科学论文、发几封电子邮件，但就连这些我都没法顺利完成。忙活了几个小时之后，我压力倍增，也非常沮丧，因为第二天我要完成更多的事情。</p></blockquote><p>卡罗琳从小时候起就注意到了对于自己注意力缺失的病症，并且受此困扰，已经影响到了工作和生活。</p><blockquote><p>那天，我的心情十分沮丧，不停地用头撞着桌子，我突然想到了哈佛大学的神经科学家乔·德古提斯（Joe De Gutis），几年前我在写一篇文章时和他聊过。我知道他的专长是认知训练，特别是专注训练，所以给他发了一封邮件，看他能否帮助我解决问题。他和波士顿大学的麦克·艾斯特曼（Mike Esterman）一直在研究一种计算机辅助训练和脑磁刺激——又叫经颅磁刺激（Transcranial Magnetic Stimulation，简称TMS）——相结合的解决方案，帮助人们更好地集中注意力。到目前为止，他们的方案确实有助于提高专注能力。像大多数的神经科学研究一样，他们只在有着严重问题的人身上进行试验，包括脑损伤、中风、创伤后应激障碍（PTSD）和注意力缺陷多动障碍（ADHD）等患者，我很想知道这种方法对我来说是否有效。</p></blockquote><p>哈佛大学的神经科学家乔·德古提斯和波士顿大学的麦克·艾斯特曼为其尝试了一种非侵入式的计算机辅助训练，经颅磁刺激术。</p><h4 id="整个训练过程如下："><a href="#整个训练过程如下：" class="headerlink" title="整个训练过程如下："></a><strong>整个训练过程如下：</strong></h4><ol><li><p>接受测试并且量化注意力。</p><blockquote><p>他们发来了一个链接，让我做一个线上注意力测试，同时发来了几份问卷，用以了解一些基本情况，比如我因为注意力不集中而犯下愚蠢错误的频率（经常）。此外，我还需要填写一个“走神”量表，衡量我发呆时神游的指数（非常高）。</p><p>我做完了所有的测试和问卷，并将结果回复给他们，第二天便在收件箱里得到了残酷的事实——我在注意力测试中的得分率只有51%，比平均水平整整低了20%.</p></blockquote></li><li><p>接受两小时的评估获得技能水平作为测试基准线。</p><blockquote><p>首先进行的是我之前在家做过的在线测试的完整版本——麦克亲切地称之为“<u>别碰贝蒂</u>”（Don’t Touch Betty）。我的任务就是在一连串的男性面孔中找到唯一的女性面孔（贝蒂），每张面孔都会显示约一秒，然后渐渐消失，换成下一张脸。当出现男性面孔时，我需要按下按钮，而贝蒂的脸出现时则不需要按钮。这听起来很容易，但其实不然，因为所有出现的面孔都是黑白的，而且都处于山川、城市等黑白的复杂场景中，在面孔变换的同时，画面的背景也在不断变化着。</p><p>…</p><p>接下来还有几个测试，每一项测试都侧重于注意力的不同方面。在一项叫作“转瞬即逝”的测试中，屏幕上会以最快的速度闪过一串字母，而我则需要辨别出夹杂在这一串字母中的两个数字。这项测试主要针对的是大脑效率，旨在测试我的注意力网络重置已有规律并发现新事物的速度。我猜我的结果应该是“并不快”，因为很多次我报出来的第二个数字基本上是凭空瞎猜。</p><p>最后一项是测试我的视觉专注能力。它主要衡量我有多容易被周边视野中的其他事物分散注意力，比如屏幕上弹出的新邮件通知，或者窗外飞过的一只小鸟。我觉得自己的表现还可以，但却有点疲倦，我坐在桌前，将脸埋在双手中。那时已经是傍晚了，或许我躺下来进行半个小时的脑部扫描是个不错的主意——即使是躺在嘈杂的核磁共振成像扫描仪中。</p></blockquote></li><li><p>进行脑部扫描，绘制出想要刺激的大脑区域。</p><blockquote><p>扫描的目的不是要追踪我的大脑活动，而是要获取我的大脑的3D图像，以此来确定涉及注意力的脑区，便于使用经颅磁刺激机器。他们主要感兴趣的区域叫作“背侧注意网络”（dorsal attention network），它负责将眼睛后侧的思维区域与顶叶皮层（parietal cortex）相连。顶叶皮层位于耳朵上部偏后，相当于各种感官的交换总机。<br>虽然大脑两侧都有类似的系统，但实时成像研究表明，在普通人中，右脑的那一部分承担了主要的工作。相反，有注意力集中障碍的人通常在效率较低的左脑有着更多的活动。</p></blockquote></li><li><p>使用经颅磁刺激仪暂时麻痹注意网络中的左侧的活动，使测试者不得不使用右侧网络活动。</p><blockquote><p>后来麦克和乔告诉我，他们的计划是用经颅磁刺激机器暂时麻痹我注意网络中左侧的活动，让我不得不使用右侧的注意网络。这样做类似于绑住我经常使用的那只手，迫使我用另一只手。然而，由于大脑总会通过最简单的路径传递信息，一旦更有效率的系统开始正常运行，日后它将有望随时为我所用。</p><p>…</p><p>我们来到了有着巨大椅子的房间，看到了我的大脑活灵活现地出现在屏幕上。虽然不知道我之前的期待是怎样，但我的大脑看起来相当正常，所有该凸起的地方都有凸起，也没有什么不应该出现的明显的洞。麦克将一张背侧注意网络的图片叠在我的大脑图像上，在“额叶眼动区”（frontal eye field）标记了记号——这就是他准备进行刺激的区域。</p><p>我本以为他们会刺激我的大脑，从而让它更好地运作，但实际上恰恰相反：他们用针对性磁脉冲麻痹我左侧注意网络的部分活动，以迫使我使用右侧注意网络——也就是正常情况下本该使用的那一侧。磁刺激的影响几分钟后就会消失，因此我需要在被刺激之后立刻进行训练，之后再将这个过程重复进行两次。</p></blockquote></li><li><p>在大脑刺激之后立即做认知训练，每天两次，每次完成三组长达12分钟的训练。</p><blockquote><p>计划的另一部分则是训练——乔在这方面十分擅长。我需要完成三组长达12分钟的训练，每天两次，持续一周，此外，在大脑刺激后的两天里，还有额外的训练。</p><p>说实话，虽然这些训练可能对我有帮助，但它们实在是太无聊了。就像“别碰贝蒂”测试一样，屏幕上会出现目标图像——比如棕色桌子上的白色杯子，见到这个图像时就不能按钮，但出现其他颜色的杯子或桌子时则可以按钮。第一次尝试，在所有不许按钮的图像中，我的正确率只有11%。虽然没有什么基准可以比较，但这个分数看起来挺糟糕的。后来他们告诉我，需要将测试调整到我能答对50%的水平，只有这样，他们才有可能提高我的能力。这显然还有很多工作要做，尤其是在这么短的时间里——四天后，我就要飞回英国了。但现在我能做的只有睡觉。</p></blockquote></li></ol><h4 id="训练的结果如下："><a href="#训练的结果如下：" class="headerlink" title="训练的结果如下："></a><strong>训练的结果如下：</strong></h4><blockquote><p>电磁刺激之后，我紧接着进行了乔的训练。但我们很快就发现，无论是否受过刺激，经过休息恢复后，训练结果仍然令人沮丧。我可以看到自己的手缓慢地移向空格键，但就是没法阻止它按下去。<br>经过第一次刺激之后，我在测试中的表现甚至更糟糕了，我也能看出来麦克有些不安。他没有多说什么，但似乎希望我在经过短暂的刺激之后，能够表现得好一些。但乔说，可能是因为我平时太依赖左侧的网络，所以在它被麻痹后根本无法完成任务。如果是这样的话，那么通过训练我应该能逐渐改善这个现状。<br>然而事实并非如此，到了第三天，我还是没有丝毫进步。我沮丧极了，每次错按空格时，我都想大声叫出来。我觉得自己很蠢——事实上，我几乎一眼就能轻松地辨认出目标，但似乎就算拿枪指着我，我也没法控制自己不去按空格键。麦克和乔看起来比我还要沮丧，也有些担心。乔后来承认，他担心我回家之后会在书里评价他的训练是“最愚蠢的事”。</p><p>但是在第三天训练间歇的某个时刻，事情突然发生了转变。我的“不按按钮”正确率从11%和30%一下提高到了50%-70%。更令人惊奇的是，我开始享受这项测试起来。当不小心犯错的时候，我能感觉到自己的思绪去了哪里——这是一种非常陌生的感觉。比如，我意识到有一次按错键是因为我在想儿子正在家里干什么。又比如，我会想训练结束后是喝红酒还是啤酒。又过了一天，我已经可以单手完成测试，另一只手则随意地拿着茶杯。更重要的是，之前我的脑海里只有白噪音，我根本无法知道自己的思想在做什么，而现在我能感到如禅定般的平静，只有少数一些令我分心的波动。</p><p>乔对此似乎很兴奋，他告诉我这可能是一个重大进步。在心理学中，<strong>知道自己的想法被称作“元意识”，而如果你需要发现自己神游，以阻止自己的思维别飘走太远，元意识十分重要。</strong>他说：“受过该项训练帮助的人都会进入这样一个阶段，他们发现自己比以前更具有元意识，他们会在完成任务的时候看到自己在想着其他的事。”</p><p>虽然这可能只是我的想象，但我感觉平静了许多。通常，我会在工作的时候拖延，结果弄得自己在本该放松的时间仍然在工作，并且十分焦虑。但这一个星期，我就好像是一名新闻忍者：在指定的时间里完成了所有的工作，然后与我在波士顿的好友们好好叙旧，共度美好时光，享受着回归我最喜爱的城市生活，完全没有因工作未完成而产生压力和愧疚。这听起来也许没什么，但对我来说，这是一个启示——原来生活可以不用充满压力。<br>我还注意到了一些工作之外的微妙变化。在波士顿的第二天，我搬离酒店，到朋友家度过这周剩下的几天。这件事本来会让我回到原来的状态——即使是在亲朋好友家做客，我也会感到十分焦虑。我无法放松，因为我总觉得自己碍人家的事，应该更多地帮忙做饭和打扫卫生，或者更好地跟他们聊天。然后我又担心自己的焦虑会给所有人带来压力。但是，这周我并不是这样，一切都是那么美好。</p><p>…</p><p>这些训练与刺激真的对我的大脑起到作用了吗？简单来说，似乎是的。在“别碰贝蒂”测试中，我的得分表现有了大幅飞跃，错误率从训练前的53%（比他们测试的所有健康的人都要糟糕），降到了训练之后的9.6%（几乎赶上了这项研究中健康人的最高水平）。</p></blockquote><p><img src="/1567946666609.png" alt></p><h4 id="结果的解释："><a href="#结果的解释：" class="headerlink" title="结果的解释："></a><strong>结果的解释：</strong></h4><blockquote><p>但是，有没有可能只是因为我能更好地控制自己的手部动作，从而阻止了自己按下按键呢？毕竟，训练的内容跟最终的“别碰贝蒂”测试十分相似。我把这个想法告诉了乔，但他告诉我，根据他们基于此训练的其他研究，<u>单凭反复练习只能获得4%的提升</u>，而我的进步幅度相当于这个数字的十几倍。除此之外，在“转瞬即逝”的测试中——测试大脑在分心后多久可以重新专注——我的准确度也有相应的提升，从训练前的46%提高到了87%。“这是巨大的进步。”乔说。“转瞬即逝”测试不仅不需要按按键，而且它并不是像“别碰贝蒂”测试那样单凭反复练习就能提升的测试。</p><p>好吧，看来训练的结果是真的，那么他们究竟对我做了什么？在短短一周的时间里，通过四个小时无聊且简单的大脑训练和刺激，我的大脑真的发生了改变吗？<br>“<u>生理结构并没有什么变化</u>，”麦克和乔不约而同地说，他们试图让我摆脱“他们已经重塑了我的大脑回路”的想法，麦克说，“<u>但从功能上看，你运用大脑的方式发生了变化。</u>”这意味着，虽然我可能并没有得到新的大脑回路，但现有的回路可能会更加高效地运作。</p><p>从某种程度来说，这更令人兴奋，因为这意味着，<u>你不需要对大脑做出巨大的结构调整，就可以从根本上改变它的运作方式</u>——更重要的是，改变你体验生活的方式。只需要在正确的方向上稍作努力，一切就都会有所变化。<br>但这也意味着，我们无法准确地指出我的大脑究竟发生了什么变化，因为我们在训练过程中并没有对大脑进行扫描，而且没有进行训练前后的核磁共振成像扫描对比。这并不是因为他们忘记这么做了，而是因为<u>核磁共振成像只能提供脑部的大致图像，在短短几天的训练之后，大脑各处的连接所发生的变化非常微小，不可能在图像中体现出来</u>。因此，我们只能从其他研究以及他们早前让我进行的心理测试结果进行推断。科学通常都是这样：把全新的结果与已经存在的知识体系进行比较，从而推断出造成此结果的可能原因。</p><p>乔的测试中所体现的变化，以及我个人所感受到的变化，归根结底是因为这项训练的设计原理。训练内容首要是无聊的——唯有如此，它才会消耗你的注意力。在一项试点研究中，另一组研究人员试图让训练内容对儿童而言更加有趣，但这样也失去了无聊训练所具备的种种优点。乔告诉我，无聊的事会调动我们的“强力关注”——我们可以将其描述为一种持续的“就绪”状态，让你一直关注着目标何时会出现。而不可预测的目标则会利用到“阶段性关注”，或者说间歇的警觉波动。对于捕获目标图像来说，头脑的最佳状态是你通过“强力关注”持续留意，同时能在目标出现时足够警觉地做出反应。<br>换言之，你必须让自己进入“状态”：在这个难以捉摸的点上，一切感觉都不是很难，但同时具有一定的挑战性。也正因为如此，麦克和乔之前才会一直试图将测试调整到50%的正确率，并以此作为训练的基准：这就是每个人的“状态”，一旦进入状态，就可以慢慢提高难度，逐渐提高技能。他们花了很长时间来寻找我最合适的状态，当他们在第三天终于找到它时，我便根据这一基础，让它成为在我需要大脑保持专注时可以达到的状态。</p></blockquote><h4 id="尝试找到神经学证据"><a href="#尝试找到神经学证据" class="headerlink" title="尝试找到神经学证据"></a><strong>尝试找到神经学证据</strong></h4><blockquote><p>显然，现在我似乎已经可以达到这个状态，但这一“状态”究竟是什么？多年来，神经科学家一直试图回答这个问题，他们或成功，或失败。但麦克认为，在这样的状态下，背侧注意网络和另一个被称作“默认模式网络”（default mode network）的大脑回路之间达到了完美平衡。当我们进行创意思考、走神或者什么都不想时，激活的便是默认模式网络。<br>波士顿团队在最近的一系列实验中发现，当走神活动达到最高水平时，人们会更有可能在“别碰贝蒂”测试中犯错；而当注意力网络活动增加时，这一现象便会得到改善。不过，注意力网络过于活跃也会适得其反：两个网络不管哪一边的活动过多，都会导致人不能长时间专注于眼前的任务。</p></blockquote><hr><h4 id="有意思的语录"><a href="#有意思的语录" class="headerlink" title="有意思的语录"></a>有意思的语录</h4><blockquote><p>我这几天新体验到的冷静状态几乎不可能持续，除非我采取措施让它得到保持。显然，成年人的大脑训练就有这样的缺点。就像锻炼身体一样，你必须一直坚持，否则身体就会变得和从前一样松弛。</p></blockquote><blockquote><p>也许我一直为自己是怀疑论者而感到骄傲。我愿意相信一切说法都是垃圾，并在此基础上质疑任何事物，直到确定自己没有被蛊惑为止。</p></blockquote><blockquote><p>正念冥想改变了默认模式（走神）网络与执行控制网络的连接方式，起到了与乔的训练类似的作用——或者说，如果长期坚持，一定会有效果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 认知迭代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;&lt;认知迭代&gt;&gt; 读书笔记</title>
      <link href="/2019/09/08/%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/"/>
      <url>/2019/09/08/%E8%AE%A4%E7%9F%A5%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="观感"><a href="#观感" class="headerlink" title="观感"></a>观感</h2><p>&lt;&lt;认知迭代&gt;&gt;是一本非常不同的心理书籍，在我读到的书籍中虽然作者都会引用心理学实验来增强其论述观点的合理性，本书中作者亲身去探索和体验了不同的实验，这种感觉非常奇妙。</p><p>​    本书作者卡罗琳是一位科学编辑，我将其想象成接近记者一类的工作，需要更多创造力而非逻辑性，从其描述中可以看出，卡罗琳也经历着和我们一样的普通人的焦虑和烦恼，并且拥有一种探索自我的特质，这非常吸引我。</p><p>​    尽管现在我仍然对认知领域的实验的科学性保留态度，但我已经接受了一些基本的假设。本书虽然大多数情况都是作者的单人实验，实验没有采取科学的统计和双盲测试，使得这些实验没有科学性而言，但是通过类似经颅磁刺激训练让我了解到了脑的再可塑性，加深了我对于神经科学的理解。卡罗琳的旅途无疑为我对于人的自我探索这一富有挑战的命题添加了更多的科学武器。</p><p>​    读书笔记尝试在构建本书脉络的同时记录一些我的想法。</p><p>卡罗琳选择探索了：</p><ol><li>注意力——能够坚持专注于眼前的任务，抵制干扰。</li><li>控制焦虑——想办法减轻压力。</li><li>创造力——学会根据需要产生新的创意。</li><li>导航力——增加我迫切需要的方向感。</li><li>时间感知——想办法享受每一刻，并能够打发无聊时间。</li><li>数字感——尝试获得“数学头脑”，学会逻辑思考。</li></ol><h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><ol><li><h3 id><a href="#" class="headerlink" title></a><strong><a href="/2019/09/08/认知迭代-1/" title="认知迭代 第一章">认知迭代 第一章</a></strong></h3></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 认知迭代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令学习笔记3 文本处理</title>
      <link href="/2017/04/29/linux-command-tutorial3/"/>
      <url>/2017/04/29/linux-command-tutorial3/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-文本处理"><a href="#第三章-文本处理" class="headerlink" title="第三章 文本处理"></a>第三章 文本处理</h1><p><strong>本节介绍linux下使用Shell处理文本时最常用的工具： find， grep， xargs， sort， uniq， tr， cut， paste， wc， sed， awk；提供的例子和参数都是常用的；我对shell脚本使用的原则是命令单行书写，尽量不要超过2行；如果有更为复杂的任务需求，还是考虑使用python吧。（逃）</strong></p><h2 id="3-1-find-文件查找"><a href="#3-1-find-文件查找" class="headerlink" title="3.1 find 文件查找"></a>3.1 find 文件查找</h2><ul><li>find的格式<pre><code>find [path...] [expression]expression = [Options] [Tests] [Actions]组成find会查找path下的每一个文件，将其带入expression运算的出真值，值为真则执行指定的动作，否则则不执行。</code></pre></li><li>find的主要选项<pre><code>$ find . -name pattern //将路径前面的目录名去掉后做匹配$ find . -path pattern//保留路径名做匹配$ find . -mmin n//对文件数据的修改是在n分钟之前的文件$ find . -mtime n//对文件数据的修改是在n*24小时之前的文件$ find . -perm mode文件的权限位恰好是mode$ find . -regex pattern//对整个路径名做正则匹配$ find . -type c//文件是c类型的 类型主要有（d 目录| f 普通文件| l 符号链接）</code></pre></li><li>组合应用<pre><code>//找出当前目录下的.txt或者.pdf后缀形式的文件并输出文件大小(利用-printf参数你甚至可以自己写一个ls命令)$ find .\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -printf &apos;%f\t%k\n&apos;//正则方式查找.txt和.pdf(要注意转义符号的应用)$ find . -regex &quot;.*\(\.txt\|\.pdf\)$&quot;// 否定参数，查找锁哟非txt文本：$ find . ! -name &quot;*.txt&quot; -print// 忽略大小写的查找,可查找test.c和Test.c$ find . -iname &quot;test.c&quot;指定搜索深度，打印出当前目录的文件（深度为1）$ find . maxdepth 1 -type f</code></pre></li><li>定制搜索<pre><code>//按类型搜索,只列出所有目录$ find . -type d//按时间搜索，一天前访问过的的文件$ find . -atime 1//最近7天访问过的所有文件$ find . -atime -7 type f -print//按文件大小搜索$ find . -type f -size +2k//查找具有可执行权限的所有文件$ find . -type f -perm 644 -print//查找用户lsz所拥有的文件$ find . -type f -user weber -print</code></pre></li><li>对匹配到的文件做后续处理<pre><code>//删除当前目录下所有的swap文件$ find . -type f -name &quot;*.swap&quot; -delete//另一种语法$ find . -type f -name &quot;*.swap&quot; | xargs rm//使用强大的-exec将当前目录下的所有权变更为lsz（{}会将匹配到的文件替换掉）$ find . -type f -user root -exec chown lsz {} \;//将找到的文件copy到另一个目录$ find . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp {} OLD \;//如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后-exec执行脚本即可$ find . -type f -mtime +10 -name &quot;*.txt&quot; -exec ./commands.sh {} ;//默认使用’\n‘为文件的定界符</code></pre></li></ul><hr><h2 id="3-2-grep-文本搜索"><a href="#3-2-grep-文本搜索" class="headerlink" title="3.2 grep 文本搜索"></a>3.2 grep 文本搜索</h2><ul><li><p>简述<br>  Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。使用grep对于?, +, |, {, (, )需要用\转义，而egrep可直接使用。</p></li><li><p>使用格式</p><pre><code>grep [options] PATTERN [FILE]</code></pre></li><li><p>主要选项</p><pre><code>－c：只输出匹配行的计数。－I：不区分大 小写(只适用于单字符)。－h：查询多文件时不显示文件名。－l：查询多文件时只输出包含匹配字符的文件名。－n：显示匹配行及 行号。－s：不显示不存在或无匹配文本的错误信息。－v：显示不包含匹配文本的所有行。pattern正则表达式主要参数：\： 忽略正则表达式中特殊字符的原有含义。^：匹配正则表达式的开始行。$: 匹配正则表达式的结束行。\&lt;：从匹配正则表达 式的行开始。\&gt;：到匹配正则表达式的行结束。[ ]：单个字符，如[A]即A符合要求 。[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。。：所有的单个字符。* ：有字符，长度可以为0。</code></pre></li><li><p>使用简单实例</p><pre><code>//以test开头的所有文件为搜索范围，匹配’python‘字符$ egrep &apos;python&apos; test*//在多级目录中对文本递归搜索$ grep &quot;class&quot; . -R -n//匹配多个模式$ grep -e &apos;class&apos; -e &apos;vitural; file//显示至少包含5个连续小写字母的行$ egrep &apos;[a-z]{5,}&apos; test//如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个es(\1)，找到就显示该行。如果用egrep或grep -E，就不用”\”号进行转义，直接写成’w(es)t.*\1′就可以了。$ egrep &apos;w(es)t.*\1&apos; file</code></pre></li><li><p>使用复杂实例</p><pre><code>//假设您正在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件//需要递归查找所有的文件$ egrep -r magic &apos;./&apos;//只查找当前目录,并且转到less阅读$ egrep -d skip magic ./* | less&apos;//将日志中的带有所有where条件的sql查找出来$ cat LOG.* | tr a-z A-Z|grep &quot;FROM&quot; | grep &quot;WHERE&quot; &gt; b//中文查找示例，如果要查找的文字是’中文‘查找到他的utf-8编码和gb2312编码分别是 E4B8ADE69687和D6D0CEC4$ grep -P &apos;\xE4\xB8\xAD\xE6\x96\x87|\xD6\xD0\CE\xC4&apos; ./*</code></pre></li><li><p>下面还有一些有意思的命令行参数：</p><pre><code>grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，grep -l pattern files ：只列出匹配的文件名，grep -L pattern files ：列出不匹配的文件名，grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，grep -C number pattern files ：匹配的上下文分别显示[number]行，grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行，grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。grep -n pattern files  即可显示行号信息grep -c pattern files  即可查找总行数</code></pre></li><li><p>这里还有些用于搜索的特殊符号：</p><pre><code>\&lt; 和 \&gt; 分别标注单词的开始与结尾。例如：grep man * 会匹配 ‘Batman’、’manic’、’man’等，grep ‘\&lt;man’ * 匹配’manic’和’man’，但不是’Batman’，grep ‘\&lt;man\&gt;’ 只匹配’man’，而不是’Batman’或’manic’等其他的字符串。‘^’：指匹配的字符串在行首，‘$’：指匹配的字符串在行 尾，</code></pre></li></ul><hr><h2 id="3-3-xargs命令行参数转换"><a href="#3-3-xargs命令行参数转换" class="headerlink" title="3.3 xargs命令行参数转换"></a>3.3 xargs命令行参数转换</h2><ul><li>简述<br>  xargs命令是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。xargs的默认命令是echo，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行*命令的重要组件之一。</li><li>用法<pre><code>xargs [options] [command]</code></pre></li><li>重要选项<pre><code>-d 定义定界符-n 指定输出为多行-I {} 指定替换字符串， 这个字符串会在xargs拓展时被替换掉，用于待执行命令需要多个参数时-0 指定null（0）为输入定界符，与find的print0可串联使用</code></pre></li><li>简单实例<pre><code>//将多行输出转化为单行输出$ cat file.txt | xargs   //将单行转化为多行 以每行3个字段显示$ cat file.txt | xargs -n 3//统计程序行数$ cat file.txt | xargs -I {} ./command.sh -p {} -1//计算所有的文件的行数（有些相当与python里面的map)$ find ./ -name &apos;*test[AB].c&apos;  | sort| xargs  -I {} wc -l {}</code></pre></li></ul><hr><h2 id="3-4-sort排序"><a href="#3-4-sort排序" class="headerlink" title="3.4 sort排序"></a>3.4 sort排序</h2><ul><li>简述<br>  sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。</li><li>语法<pre><code>sort [Option]... [File]...</code></pre></li><li>重要选项<br>  -b：忽略每行前面开始出的空格字符；<br>  -c：检查文件是否已经按照顺序排序；<br>  -d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；<br>  -f：排序时，将小写字母视为大写字母；<br>  -i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；<br>  -m：将几个排序号的文件进行合并；<br>  -M：将前面3个字母依照月份的缩写进行排序；<br>  -n：依照数值的大小排序；<br>  -o&lt;输出文件&gt;：将排序后的结果存入制定的文件；<br>  -r：以相反的顺序来排序；<br>  -t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；<br>  +&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li><li>简单实例<pre><code>cat sort.txt ;printf &apos;*********\n&apos;; sort sort.txtaaa:10:1.1ccc:30:3.3ddd:40:4.4bbb:20:2.2eee:50:5.5eee:50:5.5*********aaa:10:1.1bbb:20:2.2ccc:30:3.3ddd:40:4.4eee:50:5.5eee:50:5.5//忽略相同行$ cat -u sort.txtaaa:10:1.1bbb:20:2.2ccc:30:3.3ddd:40:4.4eee:50:5.5//使用 -n -r -k -t$ cat sort.txtAAA:BB:CCaaa:30:1.6ccc:50:3.3ddd:20:4.2bbb:10:2.5eee:40:5.4eee:60:5.1// 按字符串数值比较大小（ASCII码）$ sort sort.txt -n// 按照BB列的数字大小排序$ sort -nrk 2 -t: sort.txteee:60:5.1ccc:50:3.3eee:40:5.4aaa:30:1.6ddd:20:4.2bbb:10:2.5AAA:BB:CC</code></pre></li><li>-k 复杂用法实例<br>  -k选项的语法格式：<br>  FStart.CStart<br>  Modifie,FEnd.CEnd Modifier<br>  ——-Start——–,——-End——–<br>  FStart.CStart 选项 , FEnd.CEnd<br>  选项<br>  这个语法格式可以被其中的逗号,分为两大部分，Start部分和End部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说Start部分的FStart和C.Start。C.Start也是可以省略的，省略的话就表示从本域的开头部分开始。FStart.CStart，其中FStart就是表示使用的域，而CStart则表示在FStart域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定FEnd.CEnd，如果你省略.CEnd，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。<br>  从公司英文名称的第二个字母开始进行排序：<pre><code>$ sort -t -k 1.2 facebook.txtbaidu 100 5000sohu 100 4500google 110 5000guge 50 3000</code></pre>  使用了-k 1.2，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。<br>  只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：<pre><code>$ sort -t -k 1.2,1.2 -nrk 3,3 facebook.txtbaidu 100 5000google 110 5000sohu 100 4500guge 50 3000</code></pre>  由于只对第二个字母进行排序，所以我们使用了-k 1.2,1.2的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用-k 1.2怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排序，我们也使用了-k 3,3，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序”了。</li></ul><hr><h2 id="3-5-uniq消除重复行"><a href="#3-5-uniq消除重复行" class="headerlink" title="3.5 uniq消除重复行"></a>3.5 uniq消除重复行</h2><ul><li>简述<br>  文本中的重复行，基本上不是我们所要的，所以就要去除掉。linux下有其他命令可以去除重复行，但是我觉得uniq还是比较方便的一个。使用uniq的时候要注意以下二点<br>  1，对文本操作时，它一般会和sort命令进行组合使用，因为uniq 不会检查重复的行，除非它们是相邻的行。如果您想先对输入排序，使用sort -u。<br>  2，对文本操作时，若域中为先空字符(通常包括空格以及制表符)，然后非空字符，域中字符前的空字符将被跳过</li><li>语法<pre><code>uniq [Option] [Input[Output]]</code></pre></li><li>主要参数<pre><code>-c, --count              //在每行前加上表示相应行目出现次数的前缀编号-d, --repeated          //只输出重复的行-D, --all-repeated      //只输出重复的行，不过有几行输出几行-f, --skip-fields=N     //-f 忽略的段数，-f 1 忽略第一段-i, --ignore-case       //不区分大小写-s, --skip-chars=N      //根-f有点像，不过-s是忽略，后面多少个字符 -s 5就忽略后面5个字符-u, --unique            //去除重复的后，全部显示出来，根mysql的distinct功能上有点像-z, --zero-terminated   end lines with 0 byte, not newline-w, --check-chars=N      //对每行第N 个字符以后的内容不作对照--help              //显示此帮助信息并退出--version              //显示版本信息并退出</code></pre></li><li>主要用法<pre><code>//统计各行在文件中出现的次数   sort unsort.txt | uniq -c//找出重复行sort unsort.txt | uniq -d</code></pre></li></ul><hr><h2 id="3-6-用tr进行转换"><a href="#3-6-用tr进行转换" class="headerlink" title="3.6 用tr进行转换"></a>3.6 用tr进行转换</h2><ul><li>简述<br>  tr用来从标准输入中通过替换或删除操作进行字符转换。tr主要用于删除文件中控制字符或进行字符转换。使用tr时要转换两个字符串：字符串1用于查询，字符串2用于处理各种转换。tr刚执行时，字符串1中的字符被映射到字符串2中的字符，然后转换操作开始。</li><li>用法<pre><code>tr [Option]... SET1 [SET2]//tr -c -d -s [&quot;string1_to_translate_from&quot;][&quot;string2_to_translate_to&quot;] &lt; input-file</code></pre></li><li>主要选项<pre><code>-c 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII。-d 删除字符串1中所有输入字符。-s 删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串。</code></pre></li><li>字符范围<pre><code>指定字符串1或字符串2的内容时，只能使用单字符或字符串范围或列表。[a-z] a-z内的字符组成的字符串。[A-Z] A-Z内的字符组成的字符串。[0-9] 数字串。\octal 一个三位的八进制数，对应有效的ASCII字符。[O*n] 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串。tr中特定控制字符的不同表达方式速记符含义八进制方式\a Ctrl-G  铃声\007\b Ctrl-H  退格符\010\f Ctrl-L  走行换页\014\n Ctrl-J  新行\012\r Ctrl-M  回车\015\t Ctrl-I  tab键\011\v Ctrl-X  \030</code></pre></li><li>应用实例<pre><code>//将文件file中的出现的&apos;a&apos; &apos;b&apos; &apos;c&apos;换为&apos;x&apos; &apos;y&apos; &apos;z&apos;$ cat file | tr &apos;abc&apos; &apos;xyz&apos; &gt; new_file//使用tr命令统一大小写$ cat file | tr [a-z] [A-Z] &gt; file$ cat file | tr [A-Z] [a-z] &gt; file //删除文件中的snail字符【注意】这里，凡是在file文件中出现的&apos;S&apos;,&apos;n&apos;,&apos;a&apos;,&apos;i&apos;,&apos;l&apos;字符都会被删除！而不是紧紧删除出现的&quot;Snail”字符串。$ cat file | tr -d &apos;snail&apos; &gt; file   //删除文件file中出现的换行&apos;\n&apos;、制表&apos;\t&apos;字符$ cat file | tr -d &quot;\n\t&quot; &gt; newfile//删除“连续着的”重复字母，只保留第一个$ cat file  | tr -s [a-z][A-Z] &gt; newfile   删除空行$ cat file | tr -s &quot;\n&quot; &gt; new_file//删除Windows文件“造成”的&apos;^M&apos;字符$ cat file | tr -d &quot;\r&quot; &gt; new_file$ cat file | tr -s &quot;\r&quot; &quot;\n&quot; &gt; new_file</code></pre></li></ul><hr><h2 id="3-7-cut按行切分文本"><a href="#3-7-cut按行切分文本" class="headerlink" title="3.7 cut按行切分文本"></a>3.7 cut按行切分文本</h2><ul><li>简述<br>  cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。在 每个文件FILE的各列中,把提取的片断显示在标准输出.</li><li>用法<pre><code>cut [Option]... [File]...</code></pre></li><li>主要参数<pre><code>-b, --bytes=LIST      输出 这些 字节, 以字节定位-c, --characters=LIST      输出 这些 字符， 以字符定位-d, --delimiter=DELIM      使用 DELIM 取代 TAB 做 字段(field) 分隔符-f, --fields=LIST      输出 这些 字段， 以字段定位-s, --only-delimited     不显示 没有 分隔符 的 行--output-delimiter=STRING      使用 STRING 作为 输出分隔符, 缺省 (的 输出分隔符) 为 输入分隔符LIST:N      第 N 个 字节, 字符 或 字段, 从 1 计数 起N-     从 第 N 个 字节, 字符 或 字段 直至 行尾N-M    从 第 N 到 第 M (并包括 第M) 个 字节, 字符 或 字段-M     从 第 1 到 第 M (并包括 第M) 个 字节, 字符 或 字段如果 没有 指定 文件 FILE, 或 FILE 是 -, 就从 标准输入 读取 数据.</code></pre></li><li>简单用法<pre><code>//截取who命令的第1-3个字节和第8个字节$ who | cut -b 1-3，8//提取每列的第1，3，9-15，个字符$ who | cut -c 1,3,9-15//对于非标准形式排列的文件，我们可以人为规定字段做切割//比如以冒号做切割得到文件的第1，3列$ cut -d &apos;:&apos; -f 1,3 /etc/password//显示文件除了第3列之外的所有列$ cut -f 3 --complement filename</code></pre></li></ul><hr><h2 id="3-8-paste-按列拼接文本"><a href="#3-8-paste-按列拼接文本" class="headerlink" title="3.8 paste 按列拼接文本"></a>3.8 paste 按列拼接文本</h2><ul><li>简述<br>  连续 依次 从 各个 文件 FILE 中 读取 一列 然后 合并成 新列, 中间 用 TAB 隔开, 新行 写到 标准输出.  如果 文件 FILE 不存在, 或者 FILE 是 ‘-‘, 就从 标准输入 读取 数据.</li><li>用法<pre><code>paste [Option].. [File]...</code></pre></li><li>主要参数<pre><code>-d, --delimiters=LIST      循环使用 LIST 中 的 字符 取代 TAB  -s, --serial      一次 粘贴 一个 文件, 而不是 并行 粘贴</code></pre></li><li>简单实例<pre><code>//将file1和file2用逗号连接在一起$ paste file1 file2 -d &apos;,&apos;//串行粘贴$ paste file1 file2 -s</code></pre></li></ul><hr><h2 id="3-9-wc-统计行的字符的工具"><a href="#3-9-wc-统计行的字符的工具" class="headerlink" title="3.9 wc 统计行的字符的工具"></a>3.9 wc 统计行的字符的工具</h2><ul><li>简述<br>  对每个文件输出行、单词、和字节统计数，如果指定了多于一个文件则还有一 个行数的总计。没有指定文件或指定的文件是 -，则读取标准输入。</li><li>用法<pre><code>wc [Option]... [File]...</code></pre></li><li>主要参数<pre><code>-c, --bytes, --chars       输出字节统计数。-l, --lines       输出换行符统计数。-L, --max-line-length       输出最长的行的长度。-w, --words       输出单词统计数。</code></pre></li><li>简单实例<pre><code>//统计行数$ wc -l file//统计单词数$ wc -w file//统计字符数$ wc -c file</code></pre></li></ul><hr><h2 id="3-10-sed文本替换利器"><a href="#3-10-sed文本替换利器" class="headerlink" title="3.10 sed文本替换利器"></a>3.10 sed文本替换利器</h2><ul><li><p>简述<br>  sed 是一种文件流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p></li><li><p>用法</p><pre><code>sed [OPTION]... {script-only-if-no-other-script} [input-file]...</code></pre></li><li><p>主要参数</p><pre><code>-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。-e ：直接在命令列模式上进行 sed 的动作编辑；-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)-i ：直接修改读取的文件内容，而不是输出到终端。动作说明： [n1[,n2]]functionn1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』function：a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</code></pre></li><li><p>简单实例</p><pre><code>//将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！$ nl /etc/passwd | sed &apos;2,5d&apos;//在第2行后添加hello world$ nl /etc/passwd | sed &apos;2a hellow world&apos;//在第2行前添加hello world$ nl /etc/passwd | sed &apos;2i hellow world&apos;   //将第2-5行替换为hello world$ nl /etc/passwd | sed &apos;2,5c hellow world&apos;// 仅列出2-7行$ nl /etc/passwd | sed -n &apos;2,7p&apos;//搜索/etc/passwd有root关键字的行，使用-n只打印包含模板的行$ nl -n /etc/passwd | sed &apos;/root/p&apos;//删除/etc/passwd所有包含root的行$ nl /etc/passwd | sed &apos;/root/d&apos;//数据的搜寻并执行命令nl /etc/passwd | sed -n &apos;/root/{s/bash/blueshell/;p}&apos;//如果只替换/etc/passwd的第一个bash关键字为blueshell，就退出$ nl /etc/passwd | sed -n &apos;/bash/{s/bash/blueshell/;p;q}&apos;//移除空白行$ sed &apos;/^$/d&apos; file//第一个匹配的括号内容使用标记1来引用$ nl /etc/passwd | sed -n &apos;s/hello\([0-9]\)/\1&apos;//使用双引号求职 $ sed &apos;s/$var/HLLOE/&apos;//字符串插入字符/，将文本中的每行内容（ABCDEF）转换为ABC/DEF$ sed &apos;s/^.\{3\}/&amp;\//g&apos; file</code></pre></li></ul><hr><h2 id="3-11-awk数据流处理工具"><a href="#3-11-awk数据流处理工具" class="headerlink" title="3.11 awk数据流处理工具"></a>3.11 awk数据流处理工具</h2><ul><li>简介<br>  awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</li><li>用法<br>  mawk [-W option] [-F value] [-v var=value] [–] ‘program text’ [file …]<br>  mawk [-W option] [-F value] [-v var=value] [-f program-file] [–] [file …]</li></ul><p>$$<br>  \begin{matrix}<br>   1 &amp; 2 &amp; 3 \<br>   4 &amp; 5 &amp; 6 \<br>   7 &amp; 8 &amp; 9<br>  \end{matrix} \tag{1}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令学习笔记2 文件及目录管理</title>
      <link href="/2017/04/27/linux-command-tutorial2/"/>
      <url>/2017/04/27/linux-command-tutorial2/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-文件及目录管理"><a href="#第二章-文件及目录管理" class="headerlink" title="第二章 文件及目录管理"></a>第二章 文件及目录管理</h1><h2 id="2-0-概述"><a href="#2-0-概述" class="headerlink" title="2.0 概述"></a>2.0 概述</h2><p>文件管理不外乎文件或目录的创建,删除，查询，移动。有<code>mkdir/rm/mv</code>。<br>文件查询是重点，用<code>find</code>来进行查询；<code>find</code>参数丰富，非常强大。<br>查看文件内容是个大的话题，文本的处理有很多工具供我们使用。在本章中只是点到即止。<br>有时候我们需要给文件备份，或者创建一个别名，我们需要用到<code>ln</code>。</p><h2 id="2-1-创建和删除"><a href="#2-1-创建和删除" class="headerlink" title="2.1 创建和删除"></a>2.1 创建和删除</h2><ul><li>目录的创建<pre><code>$ mkdir dir</code></pre></li><li>目录的删除(只能删除空目录)<pre><code>$ rmdir dir</code></pre></li><li>删除非空目录(如果去掉f参数每个删除都会提示y/n)<pre><code>$ rm -rf file 目录</code></pre></li><li>删除日志<pre><code>$ rm *log(等价： $ find ./ -name &quot;*log&quot; -exec rm {} \;)</code></pre></li><li>移动或重命名<pre><code>$ mv source_dir dest_dir</code></pre></li><li>复制<pre><code>$ cp -r source_dir dest_dir</code></pre></li></ul><h2 id="2-2-目录切换"><a href="#2-2-目录切换" class="headerlink" title="2.2 目录切换"></a>2.2 目录切换</h2><ul><li>切换目录<pre><code>$ cd destination</code></pre></li><li>切换到上一个工作目录<pre><code>$ cd -</code></pre></li><li>切换到home目录<pre><code>$ cd or cd ~</code></pre></li><li>显示当前路径<pre><code>$ pwd</code></pre></li><li>更改当前工作路径为 path<pre><code>cd path</code></pre></li></ul><h2 id="2-3-列出目录项"><a href="#2-3-列出目录项" class="headerlink" title="2.3 列出目录项"></a>2.3 列出目录项</h2><ul><li>显示当前目录下的文件<pre><code>$ ls</code></pre></li><li>按时间排序，以列表的方式显示目录项<pre><code>$ ls -lrt</code></pre></li><li>显示索引，显示全部文件，以列表显示，以文件大小排序<pre><code>$ ls -sail</code></pre></li></ul><blockquote><p>在.bashrc中设置命令别名<br>alias lsl=’ls -lrt’<br>alisa lm=’ls -a|more’<br>这样使用lsl，就可以显示按照修改时间排序，以列表显示<br>给每项文件前面增加一个id编号<br>ls | cat -n</p></blockquote><h2 id="2-4-查找目录及文件"><a href="#2-4-查找目录及文件" class="headerlink" title="2.4 查找目录及文件"></a>2.4 查找目录及文件</h2><ul><li>在此我们将使用强大的<code>find</code>命令和<code>locate</code>命令</li><li>搜寻文件或目录(xargs 命令解释文件)<pre><code>$ find ./ -name &quot;python*&quot; | xargs file</code></pre></li><li>注意到 <code>-name</code> 参数后面可跟一个正则表达式字符串。<pre><code>$ find ./ -name &quot;task[12345].c&quot;</code></pre></li><li>配合 <code>-exec</code> 参数产生强大的效果，比如删除所有c文件<pre><code>$ find ./ -name &quot;*.c&quot; -exec rm {} \;</code></pre></li><li>find是实时查找，如果需要更快的查询，可以试试<code>locate</code><pre><code>$ locate python</code></pre></li><li>locate会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引库<pre><code>$updatedb</code></pre></li></ul><h2 id="2-5-查看文件内容"><a href="#2-5-查看文件内容" class="headerlink" title="2.5 查看文件内容"></a>2.5 查看文件内容</h2><ul><li>查看文件命令： cat vi head tail more</li><li>显示时同时显示行号<pre><code>$ cat -n</code></pre></li><li>按页显示列表内容<pre><code>$ ls -al| more</code></pre></li><li>只看前10行<pre><code>$ head -10 file</code></pre></li><li>显示文件的第一行<pre><code>$ head -1 file</code></pre></li><li>显示文件倒数第五行<pre><code>$ tail -5 file</code></pre></li><li>查看两个文件之间的区别<pre><code>$ diff file1 file2</code></pre></li><li>动态显示文本最新信息<pre><code>$ tail -f file.log</code></pre></li></ul><h2 id="2-6-查找文件内容"><a href="#2-6-查找文件内容" class="headerlink" title="2.6 查找文件内容"></a>2.6 查找文件内容</h2><ul><li>使用<code>egrep</code>查询文件内容<pre><code>$ egrep &apos;expression&apos; file</code></pre></li></ul><p>2.7 文件于目录权限修改</p><ul><li>改变文件的拥有者 chown<pre><code>$ sudo chown user file</code></pre></li><li>改变文件读，写，执行等属性 <pre><code>$ chmod +rwx file</code></pre></li><li>递归子目录修改<pre><code>$ chmod -R dir/</code></pre></li><li>增加脚本可执行权限<pre><code>$ chmod a+x script</code></pre></li></ul><h2 id="2-8-给文件增加别名"><a href="#2-8-给文件增加别名" class="headerlink" title="2.8 给文件增加别名"></a>2.8 给文件增加别名</h2><ul><li>创建硬链接,硬链接保存了指向源文件的位置和信息也保存了源文件的数据,引用硬链接相当于引用源文件<pre><code>$ cp -l source link$ ln source link</code></pre></li><li>创建软链接，软链接只保存了源文件的位置和信息<pre><code>$ cp -s source link   $ link -s source link</code></pre></li></ul><h2 id="2-9-管道和重定向"><a href="#2-9-管道和重定向" class="headerlink" title="2.9 管道和重定向"></a>2.9 管道和重定向</h2><ul><li>批处理命令连接执行，使用|，下一个命令的参数是上一个命令的返回结果<pre><code>$ cat file | grep &quot;python&quot;</code></pre></li><li>串联使用命令：使用分号<pre><code>$ ls ; cd</code></pre></li><li>如果前面执行的命令成功，则执行后面一条，否则则不执行<pre><code>$ cmd1 &amp;&amp; cmd2</code></pre></li><li>前面成功则执行命令1，失败则执行命令2<pre><code>$ cmd &amp;&amp; cmd1 || cmd 2</code></pre></li></ul><hr><ul><li><p>重定向</p><blockquote><p>有时候你想要把一个命令的输出信息保存在一个文件里而不是在显示器上显示它，你就会用到重定向。重定向可以把一个文件用到某个命令的输出上，也可以用在输出上。</p></blockquote><pre><code>$ cmd &gt; outputfile$ date &gt; output.log</code></pre></li><li><p>清空文件</p><pre><code>$ &gt; file</code></pre></li><li><p>如果要在文件后面追加内容而不删除原来的内容，可以使用</p><pre><code>$ cmd &gt;&gt; file</code></pre></li></ul><hr><ul><li><p>输入重定向</p><blockquote><p>输入重定向将文件的内容定向到命令。</p></blockquote><pre><code>$ cmd &lt; inputfile$ wc &lt; inputfile</code></pre><blockquote><p>wc 命令提供了对文本中的行数次数和字节数的计数</p></blockquote></li><li><p>内联输入重定向</p><blockquote><p>你会在命令行中输入数据直到输入EOF这个制定的关键字</p></blockquote><pre><code>$ wc &lt;&lt; EOF</code></pre></li></ul><h2 id="2-10-设置环境变量"><a href="#2-10-设置环境变量" class="headerlink" title="2.10 设置环境变量"></a>2.10 设置环境变量</h2><blockquote><p>启动帐号后自动执行的文件是<code>.profile</code>，通过这个文件可以设置自己的环境变量<br>安装的软件路径一般都要加入到path中</p></blockquote><h2 id="2-11-bash快捷输入或删除"><a href="#2-11-bash快捷输入或删除" class="headerlink" title="2.11 bash快捷输入或删除"></a>2.11 bash快捷输入或删除</h2><blockquote><p>快捷键Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行<br>Ctl-W   删除当前光标到前边的最近一个空格之间的字符<br>Ctl-H   backspace,删除光标前边的字符<br>Ctl-R   匹配最相近的一个文件，然后输<br>Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行</p></blockquote><pre><code>综合应用:查找record.log中包含AAA，但不包含BBB的记录的总数cat -v revord.log|grep AAA|grep -v BBB|wc -l</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令学习笔记1 使用命令帮助</title>
      <link href="/2017/04/26/linux-command-tutorial1/"/>
      <url>/2017/04/26/linux-command-tutorial1/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-命令学习笔记"><a href="#Linux-命令学习笔记" class="headerlink" title="Linux 命令学习笔记"></a>Linux 命令学习笔记</h1><p>对linux命令的熟悉是操作linux系统的基础中的基础。<br>作为刚开始上手linux的新手，对基本命令应该谙熟于心，使<br>用的时候才能高效地使用。</p><h1 id="第一章-学会使用命令帮助"><a href="#第一章-学会使用命令帮助" class="headerlink" title="第一章 学会使用命令帮助"></a>第一章 学会使用命令帮助</h1><h2 id="1-1-回忆命令"><a href="#1-1-回忆命令" class="headerlink" title="1.1 回忆命令"></a>1.1 回忆命令</h2><p>在linux终端，面对命令不知道怎么用，或者不记得命令的拼写及参数时，我们需要求助于系统的帮助文档；<br>linux系统内置的帮助文档很详细，通常能解决我们的问题，我们需要掌握如何正确的去使用它们。</p><ul><li><p>只记得部分命令的场合，我们可以用 man -k 来搜索（-k keyword)，搜索的结果</p><pre><code>$ man -k printf0dprintf (3)          - formatted output conversionfprintf (3)          - formatted output conversion...</code></pre></li><li><p>需要知道某个命令的简要说明可以使用whatis（非常方便）：</p><pre><code>$ whatis aptapt (8)              - command-line interface</code></pre></li></ul><ol><li><strong>whatis能显示出命令所在的 *文档类别*（在下面man命令中介绍）并给出它们简要的描述</strong></li></ol><ul><li>如果只记得命令的部分，可以用正则匹配的办法搜索：<pre><code>$ whatis -w &quot;loca*&quot;locale (1)           - get locale-specific informationlocale (5)           - describes a locale definition filelocale (7)           - description of multilanguage supportlocale-gen (8)       - generates localisation files from template...</code></pre></li></ul><hr><ul><li>如果想要知道命令的具体参数和使用方法，我们需要用到强大的man<pre><code>$ man dateDATE(1)NAMEdate - print or set the system date and timeSYNOPSISdate [OPTION]... [+FORMAT]date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]DESCRIPTION...</code></pre></li></ul><ol><li><strong>使用f，b上下翻页；j，k 上下移动一行。；使用q退出帮助手册。</strong></li><li><strong>man的帮助手册中，将帮助文档分为了9个类别，有的关键字存在多个类别中，我们就需要制定特定的类别来查看；（一般我们查询bash命令，归类在第一类中。</strong><blockquote><p>(1)、用户可以操作的命令或者是可执行文件<br> (2)、系统核心可调用的函数与工具等<br> (3)、一些常用的函数与数据库<br> (4)、设备文件的说明<br> (5)、设置文件或者某些文件的格式<br> (6)、游戏<br> (7)、惯例与协议等。例如Linux标准文件系统、网络协议、ASCⅡ，码等说明内容<br> (8)、系统管理员可用的管理条令<br> (9)、与内核有关的文件</p></blockquote></li></ol><hr><ul><li>而更详细的介绍,则可使用info命令<pre><code>info apt...</code></pre></li></ul><hr><h2 id="1-2-简要查看路径"><a href="#1-2-简要查看路径" class="headerlink" title="1.2 简要查看路径"></a>1.2 简要查看路径</h2><ul><li><p>查看程序的binary文件所在路径</p><pre><code>$ which make/usr/bin/make</code></pre></li><li><p>查看程序的搜索路径:</p><pre><code>$ whereis pythonpython: /usr/bin/python3.5 /usr/bin/python3.5-config /usr/bin/python3.5m /usr/bin/python2.7 /usr/bin/python2.7-config /usr/bin/python /usr/bin/python3.5m-config /usr/lib/python3.5 /usr/lib/python3.6 /usr/lib/python2.7 /etc/python3.5 /etc/python /etc/python2.7 /usr/local/lib/python3.5 /usr/local/lib/python2.7 /usr/include/python3.5 /usr/include/python3.5m /usr/include/python2.7 /usr/share/python /usr/share/man/man1/python.1.gz</code></pre></li><li><p>总结</p><pre><code>whatis info man which whereis</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
